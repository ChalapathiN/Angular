// custom-validators.ts
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

// Email validator (simple regex)
export function emailValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    if (!control.value) return null; // allow empty, required handled separately
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    return emailRegex.test(control.value) ? null : { invalidEmail: true };
  };
}

// Phone number validator (10 digits, India example)
export function phoneValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    if (!control.value) return null;
    const phoneRegex = /^[6-9]\d{9}$/; // Indian mobile starts with 6-9, total 10 digits
    return phoneRegex.test(control.value) ? null : { invalidPhone: true };
  };
}

//app.component.ts
import { Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { emailValidator, phoneValidator } from './custom-validators';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  form = this.fb.group({
    email: ['', [Validators.required, emailValidator()]],
    phone: ['', [Validators.required, phoneValidator()]]
  });

  constructor(private fb: FormBuilder) {}

  onSubmit() {
    if (this.form.valid) {
      console.log('Form Data:', this.form.value);
    } else {
      console.log('Form Invalid');
    }
  }
}

<form [formGroup]="form" (ngSubmit)="onSubmit()">

  <!-- Email Field -->
  <label>Email:</label>
  <input type="text" formControlName="email" />

  @if (form.get('email')?.touched && form.get('email')?.invalid) {
    <div>
      @if (form.get('email')?.errors?.['required']) {
        <small>Email is required</small>
      }
      @if (form.get('email')?.errors?.['invalidEmail']) {
        <small>Invalid email format</small>
      }
    </div>
  }

  <!-- Phone Field -->
  <label>Phone:</label>
  <input type="text" formControlName="phone" />

  @if (form.get('phone')?.touched && form.get('phone')?.invalid) {
    <div>
      @if (form.get('phone')?.errors?.['required']) {
        <small>Phone is required</small>
      }
      @if (form.get('phone')?.errors?.['invalidPhone']) {
        <small>Invalid phone number</small>
      }
    </div>
  }

  <button type="submit" [disabled]="form.invalid">Submit</button>
</form>
